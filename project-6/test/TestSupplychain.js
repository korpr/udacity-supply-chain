// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const truffleAssert = require('truffle-assertions');
const truffle = require('../truffle');
const SupplyChain = artifacts.require('SupplyChain')
const FarmerRole = artifacts.require('FarmerRole')
const DistributorRole = artifacts.require('DistributorRole')
const RetailerRole = artifacts.require('RetailerRole')
const ConsumerRole = artifacts.require('ConsumerRole')

contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"

    const encoded = web3.eth.abi.encodeParameters(['uint256', 'uint256'], [sku, upc])
    const productID = web3.utils.keccak256(encoded, { encoding: 'hex' })
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    before(async function () {
        const farmerRole = await FarmerRole.deployed();
        farmerRole.add(accounts[1]);
        const distributorRole = await DistributorRole.deployed();
        distributorRole.add(accounts[2]);

        const retailerRole = await RetailerRole.deployed();
        retailerRole.add(accounts[3]);

        const consumerRole = await ConsumerRole.deployed();
        consumerRole.add(accounts[4]);

    });
    // 1st Test(harvest)
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Declare and Initialize a variable for event

        // Mark an item as Harvested by calling function harvestItem()
        let result = await supplyChain.harvestItem(
            upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, { from: originFarmerID });
        //
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        truffleAssert.eventEmitted(result, 'Harvested', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.');
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');

    })
    // 1.1 Test(harvest)
    it("Testing smart contract function harvestItem() - wrong caller", async () => {
        const supplyChain = await SupplyChain.deployed();
        await truffleAssert.reverts(
            supplyChain.harvestItem(
                upc, distributorID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes,
                {from: distributorID})
        );
    })
    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        let result = await supplyChain.processItem(upc, { from: originFarmerID });

        truffleAssert.eventEmitted(result, 'Processed', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.');

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);


        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');
    })
    // 2.1nd Test
    it("Testing smart contract function processItem() - call this method from stranger account", async () => {
        let testUpc = upc + 21;
        const supplyChain = await SupplyChain.deployed();
        let result = await supplyChain.harvestItem(
            testUpc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);
        await truffleAssert.reverts(supplyChain.processItem(testUpc, { from: accounts[4] }));
    })

    // 2.1nd Test
    it("Testing smart contract function processItem() - try to process item with  wrong state", async () => {
        const supplyChain = await SupplyChain.deployed();
        await truffleAssert.reverts(supplyChain.processItem(upc));
    })
    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        let result = await supplyChain.packItem(upc, { from: originFarmerID });

        truffleAssert.eventEmitted(result, 'Packed', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.');

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);


        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');
    })
    // 3.1 Test
    it("Testing smart contract function packItem() - call this method from stranger account", async () => {
        let testUpc = upc + 31;
        const supplyChain = await SupplyChain.deployed();
        await supplyChain.harvestItem(
            testUpc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);
        await supplyChain.processItem(testUpc, { from: originFarmerID });
        await truffleAssert.reverts(supplyChain.packItem(testUpc, { from: accounts[4] }));
    })

    // 3.2 Test
    it("Testing smart contract function packItem() - try to process item with  wrong state", async () => {
        const supplyChain = await SupplyChain.deployed();
        await truffleAssert.reverts(supplyChain.packItem(upc));
    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        let result = await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });

        truffleAssert.eventEmitted(result, 'ForSale', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.')

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);


        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice');
    })
    // 4.1 Test
    it("Testing smart contract function sellItem() - call this method from stranger account", async () => {
        let testUpc = upc + 31;
        const supplyChain = await SupplyChain.deployed();
        await supplyChain.harvestItem(
            testUpc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);
        await supplyChain.processItem(testUpc, { from: originFarmerID });
        await supplyChain.packItem(testUpc, { from: originFarmerID });
        await truffleAssert.reverts(supplyChain.sellItem(testUpc, 555, { from: accounts[4] }));
    })

    // 4. 2Test
    it("Testing smart contract function sellItem() - wrong item", async () => {
        const supplyChain = await SupplyChain.deployed();
        await truffleAssert.reverts(supplyChain.sellItem(upc, 555));
    })
    // 5.1 Test
    it("Testing smart contract function buyItem()  - wrong caller", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.buyItem(upc, { from: originFarmerID, value: web3.utils.toWei('2', 'ether') }));
    })
    // 5.2 Test
    it("Testing smart contract function buyItem() - paid less", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.buyItem(upc, { from: distributorID, value: 5 }));
    })
    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        let distrBalanceBefore = await web3.eth.getBalance(distributorID);
        let farmerBalanceBefore = await web3.eth.getBalance(originFarmerID);

        let result = await supplyChain.buyItem(upc, { from: distributorID, value: web3.utils.toWei('2', 'ether') });
        let distrBalanceAfter = await web3.eth.getBalance(distributorID);
        let farmerBalanceAfter = await web3.eth.getBalance(originFarmerID);

        await truffleAssert.eventEmitted(result, 'Sold', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.');
        const gasUsed = result.receipt.gasUsed;
        const tx = await web3.eth.getTransaction(result.tx);
        const gasPrice = tx.gasPrice;
        assert.equal(web3.utils.toBN(farmerBalanceAfter).toString(), web3.utils.toBN(farmerBalanceBefore).add(web3.utils.toBN(productPrice)).toString(), 'expected payment');
        assert.equal(web3.utils.toBN(distrBalanceAfter).toString(), web3.utils.toBN(distrBalanceBefore).sub(web3.utils.toBN(productPrice)).sub(web3.utils.toBN(gasPrice * gasUsed)).toString(), 'expected refund');

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);


        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
    })
    // 5.3 Test
    it("Testing smart contract function buyItem() - wrong item", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.buyItem(upc, { from: distributorID, value: 999 }));
    })
    // 6 Test
    it("Testing smart contract function shipItem() - fired buy stranger", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.shipItem(upc, { from: retailerID }));
    })
    // 6.1 Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event

        let result = await supplyChain.shipItem(upc, { from: distributorID });

        // Watch the emitted event Shipped()
        await truffleAssert.eventEmitted(result, 'Shipped', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.');
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
    })
    // 6.2 Test
    it("Testing smart contract function shipItem() - wrong item", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.shipItem(upc, { from: distributorID }));
    })
    // 7th Test
    it("Testing smart contract function receiveItem() - wrong caller", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.receiveItem(upc, { from: distributorID }));
    })
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
        const supplyChain = await SupplyChain.deployed()

        let result = await supplyChain.receiveItem(upc, { from: retailerID });

        // Watch the emitted event Shipped()
        await truffleAssert.eventEmitted(result, 'Received', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.');
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID');
    })
    it("Testing smart contract function receiveItem() - wrong item", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.receiveItem(upc, { from: retailerID }));
    })
    // 8th Test
    it("Testing smart contract function purchaseItem() - wrong caller", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, { from: distributorID }));
    })
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event

        let result = await supplyChain.purchaseItem(upc, { from: consumerID });

        // Watch the emitted event Shipped()
        await truffleAssert.eventEmitted(result, 'Purchased', { upc: web3.utils.toBN(upc) }, 'Contract should return the correct event.');
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID');
    })
    it("Testing smart contract function purchaseItem() - wrong item", async () => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, { from: consumerID }));
    })
    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice');
        assert.equal(resultBufferTwo[5], 7, 'Error: Missing or Invalid statte');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID');
    })

});

