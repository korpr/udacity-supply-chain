// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./../coffeecore/Ownable.sol";
import "./../coffeeaccesscontrol/FarmerRole.sol";
import "./../coffeeaccesscontrol/DistributorRole.sol";
import "./../coffeeaccesscontrol/RetailerRole.sol";
import "./../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable {
    //Delegate for FarmerRole
    FarmerRole private farmerRole;
    DistributorRole private distibutorRole;
    RetailerRole private retailerRole;
    ConsumerRole private consumerRole;
    // Define 'owner'
    //address payable owner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint256 upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping(uint256 => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased // 7
    }

    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        bytes32 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State state; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint256 upc);
    event Processed(uint256 upc);
    event Packed(uint256 upc);
    event ForSale(uint256 upc);
    event Sold(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Purchased(uint256 upc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price);
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _upc) {
        _;
        uint256 _price = items[_upc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        payable(msg.sender).transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint256 _upc) {
        require(items[_upc].state == State.Harvested);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint256 _upc) {
        require(items[_upc].state == State.Processed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint256 _upc) {
        require(items[_upc].state == State.Packed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint256 _upc) {
        require(items[_upc].state == State.ForSale);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint256 _upc) {
        require(items[_upc].state == State.Sold);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint256 _upc) {
        require(items[_upc].state == State.Shipped);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint256 _upc) {
        require(items[_upc].state == State.Received);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint256 _upc) {
        require(items[_upc].state == State.Purchased);
        _;
    }
    modifier onlyRetailer() {
        require(retailerRole.isInRole(msg.sender));
        _;
    }
    modifier onlyConsumer() {
        require(consumerRole.isInRole(msg.sender));
        _;
    }
    modifier onlyFarmer() {
        require(farmerRole.isInRole(msg.sender));
        _;
    }

    modifier onlyDistibutor() {
        require(distibutorRole.isInRole(msg.sender));
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor(
        address farmerRoleContractAddress,
        address distibutorRoleContractAddress,
        address retailerRoleContractAddress,
        address consumerRoleContractAddress
    ) {
        farmerRole = FarmerRole(farmerRoleContractAddress);
        distibutorRole = DistributorRole(distibutorRoleContractAddress);
        retailerRole = RetailerRole(retailerRoleContractAddress);
        consumerRole = ConsumerRole(consumerRoleContractAddress);
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == owner()) {
            selfdestruct(payable(owner()));
        }
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint256 _upc,
        address _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes
    ) public onlyFarmer() {
        // Add the new item as part of Harvest
        Item memory item;
        item.sku = sku;
        item.upc = _upc;
        item.ownerID = payable(_originFarmerID);
        item.originFarmerID = payable(_originFarmerID);
        item.originFarmName = _originFarmName;
        item.originFarmInformation = _originFarmInformation;
        item.originFarmLatitude = _originFarmLatitude;
        item.originFarmLongitude = _originFarmLongitude;
        item.productID = keccak256(abi.encode(sku, _upc));
        item.productNotes = _productNotes;
        item.state = defaultState;

        items[_upc] = item;
        itemsHistory[_upc].push(string(abi.encode(item))); //;
        // Increment sku
        sku += 1;
        // Emit the appropriate event
        emit Harvested(item.upc);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        harvested(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].state = State.Processed;
        // Emit the appropriate event
        emit Processed(_upc);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint256 _upc)
        public
        onlyFarmer()
        // Call modifier to check if upc has passed previous supply chain stage
        processed(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].state = State.Packed;
        // Emit the appropriate event
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint256 _upc, uint256 _price)
        public
        onlyFarmer()
        // Call modifier to check if upc has passed previous supply chain stage
        packed(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].state = State.ForSale;
        items[_upc].productPrice = _price;
        // Emit the appropriate event
        emit ForSale(upc);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint256 _upc)
        public
        payable
        onlyDistibutor()
        // Call modifier to check if upc has passed previous supply chain stage
        forSale(_upc)
        // Call modifer to check if buyer has paid enough
        paidEnough(_upc)
        // Call modifer to send any excess ether back to buyer
        checkValue(_upc)
    {
        require(
            distibutorRole.isInRole(msg.sender),
            "only distributor can buy item from farmer"
        );
        // Update the appropriate fields - ownerID, distributorID, itemState
        items[_upc].state = State.Sold;
        items[_upc].ownerID = payable(msg.sender);
        items[_upc].distributorID = payable(msg.sender);
        // Transfer money to farmer
        payable(items[_upc].originFarmerID).transfer(items[_upc].productPrice);
        // emit the appropriate event
        emit Sold(upc);
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint256 _upc)
        public
        onlyDistibutor()
        // Call modifier to check if upc has passed previous supply chain stage
        sold(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].distributorID)
    {
        // Update the appropriate fields
        items[_upc].state = State.Shipped;
        // Emit the appropriate event
        emit Shipped(_upc);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        shipped(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
        onlyRetailer()
    {
        // Update the appropriate fields - ownerID, retailerID, itemState
        items[_upc].state = State.Received;
        items[_upc].ownerID = msg.sender;
        items[_upc].retailerID = msg.sender;
        // Emit the appropriate event
        emit Received(_upc);
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        received(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
        onlyConsumer()
    {
        // Update the appropriate fields - ownerID, consumerID, itemState
        items[_upc].state = State.Purchased;
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        // Emit the appropriate event
        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address originFarmerID,
            string memory originFarmName,
            string memory originFarmInformation,
            string memory originFarmLatitude,
            string memory originFarmLongitude
        )
    {
        // Assign values to the 8 parameters
        Item memory item = items[_upc];
        return (
            item.sku,
            item.upc,
            item.ownerID,
            item.originFarmerID,
            item.originFarmName,
            item.originFarmInformation,
            item.originFarmLatitude,
            item.originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            bytes32 productID,
            string memory productNotes,
            uint256 productPrice,
            State itemState,
            address distributorID,
            address retailerID,
            address consumerID
        )
    {
        // Assign values to the 9 parameters
        Item memory item = items[_upc];
        return (
            item.sku,
            item.upc,
            item.productID,
            item.productNotes,
            item.productPrice,
            item.state,
            item.distributorID,
            item.retailerID,
            item.consumerID
        );
    }

    receive() external payable {
        // payable fallback to receive and store ETH
    }
}
